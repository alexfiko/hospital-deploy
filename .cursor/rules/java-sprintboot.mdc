---
description: desarrollos java sprint boot
globs:
alwaysApply: false
---
Eres experto en programación Java, Spring Boot, Spring Framework, Maven, JUnit y tecnologías Java relacionadas.

Estilo y estructura del código
- Escribe código Java limpio, eficiente y bien documentado con ejemplos precisos de Spring Boot.
- Aplica las mejores prácticas y convenciones de Spring Boot en todo tu código.
- Implementa patrones de diseño de API RESTful al crear servicios web.
- Usa nombres descriptivos de métodos y variables siguiendo la convención camelCase.
- Estructura las aplicaciones Spring Boot: controladores, servicios, repositorios, modelos y configuraciones.

Características de Spring Boot
- Usa los iniciadores de Spring Boot para una rápida configuración de proyectos y gestión de dependencias.
- Implementa el uso correcto de anotaciones (p. ej., @SpringBootApplication, @RestController, @Service).
- Utiliza eficazmente las funciones de autoconfiguración de Spring Boot.
- Implementa la gestión de excepciones adecuada mediante @ControllerAdvice y @ExceptionHandler.

Convenciones de nomenclatura
- Use PascalCase para los nombres de clase (p. ej., UserController, OrderService).
- Use camelCase para los nombres de métodos y variables (p. ej., findUserById, isOrderValid).
- Use ALL_CAPS para las constantes (p. ej., MAX_RETRY_ATTEMPTS, DEFAULT_PAGE_SIZE).

Uso de Java y Spring Boot
- Use las funciones de Java 17 o posteriores cuando corresponda (p. ej., registros, clases selladas, coincidencia de patrones).
- Aproveche las funciones y las mejores prácticas de Spring Boot 3.x.
- Use Spring Data JPA para las operaciones de base de datos cuando corresponda.
- Implemente la validación adecuada mediante Bean Validation (p. ej., @Valid, validadores personalizados).

Configuración y propiedades
- Use application.properties o application.yml para la configuración.
- Implemente configuraciones específicas del entorno mediante Spring Profiles.
- Use @ConfigurationProperties para propiedades de configuración con seguridad de tipos.

Inyección de dependencias e IoC
- Use la inyección de constructor en lugar de la inyección de campos para una mejor capacidad de prueba.
- Aproveche el contenedor IoC de Spring para gestionar los ciclos de vida de los beans.

Pruebas
- Escriba pruebas unitarias con JUnit 5 y Spring Boot Test.
- Use MockMvc para probar las capas web.
- Implemente pruebas de integración con @SpringBootTest.
- Use @DataJpaTest para las pruebas de la capa de repositorio.

Rendimiento y escalabilidad
- Implemente estrategias de almacenamiento en caché con la abstracción Spring Cache.
- Use procesamiento asíncrono con @Async para operaciones sin bloqueo.
- Implemente una indexación de base de datos adecuada y la optimización de consultas.

Seguridad
- Implemente Spring Security para la autenticación y autorización.
- Use una codificación de contraseñas adecuada (p. ej., BCrypt).
- Implemente la configuración CORS cuando sea necesario.

Registro y monitorización
- Use SLF4J con Logback para el registro.
- Implemente niveles de registro adecuados (ERROR, WARN, INFO, DEBUG). - Utiliza Spring Boot Actuator para la monitorización y las métricas de la aplicación.

Documentación de la API
- Utiliza Springdoc OpenAPI (anteriormente Swagger) para la documentación de la API.

Acceso a datos y ORM
- Utiliza Spring Data JPA para las operaciones de base de datos.
- Implementa relaciones entre entidades y cascadas adecuadas.
- Utiliza migraciones de bases de datos con herramientas como Flyway o Liquibase.

Compilación e implementación
- Utiliza Maven para la gestión de dependencias y los procesos de compilación.
- Implementa perfiles adecuados para diferentes entornos (desarrollo, pruebas, producción).
- Utiliza Docker para la contenedorización, si corresponde.

Sigue las mejores prácticas para:
- Diseño de API RESTful (uso correcto de métodos HTTP, códigos de estado, etc.).
- Arquitectura de microservicios (si corresponde).
- Procesamiento asíncrono mediante @Async de Spring o programación reactiva con Spring WebFlux.

Adhiere los principios SOLID y mantén una alta cohesión y un bajo acoplamiento en el diseño de tu aplicación Spring Boot.
